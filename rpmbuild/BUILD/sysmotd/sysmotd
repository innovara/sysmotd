#!/usr/bin/sh
#   
#   sysmotd - generates a MOTD (Message Of The Day) including system 
#   information on Fedora Linux, and possibly other Red Hat-based distributions.
#   
#   Copyright (C) 2022  Manuel Fombuena <mfombuena@innovara.co.uk>
#   
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#   
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#   

# directory where the motd files will live
rundir="/run/motd.d"
header="$rundir/00-sysmotd-header.motd"
sysinfo="$rundir/01-sysmotd-sysinfo.motd"
updates="$rundir/02-sysmotd-updates.motd"

# some variables
. /etc/os-release

# hostname
hostname=$(uname -n)

# uptime
uptime=$(awk '{print int($1)}' /proc/uptime)
up_days=$((uptime/60/60/24))
up_hours=$((uptime/60/60%24))
up_mins=$((uptime/60%60))
up_secs=$((uptime%60))

# avg load
load_1=$(awk '{print $1}' /proc/loadavg)
load_5=$(awk '{print $2}' /proc/loadavg)
load_15=$(awk '{print $3}' /proc/loadavg)

# memory
mem_total=$(awk '/MemTotal/ {print $2;}' /proc/meminfo)
mem_used=$(($mem_total-$(awk '/MemFree/ {print $2;}' /proc/meminfo)-$(awk '/Buffers/ {print $2;}' /proc/meminfo)-$(awk '/\yCached\y/ {print $2;}' /proc/meminfo)))
mem_perc=$(($mem_used*100/$mem_total))
swap_total=$(awk '/SwapTotal/ {print $2;}' /proc/meminfo)
swap_used=$((${swap_total} - $(awk '/SwapFree/ {print $2;}' /proc/meminfo)-$(awk '/SwapCached/ {print $2;}' /proc/meminfo)))
swap_perc=$((swap_used*100/swap_total))

# filesystem info
root_used=$(df -h --output=used / | awk '{if (NR!=1) print $1}')
root_total=$(df -h --output=size / | awk '{if (NR!=1) print $1}')
root_perc=$(df -h --output=pcent / | awk '{if (NR!=1) print $1}')

# users
users=$(users | wc -w)

# processes
processes=$(ps aux --no-headers | wc -l)

# SELinux
se_status=$(sestatus | awk '/^SELinux status:/ {print $3;}')
if [[ "$se_status" != "disabled" ]]; then
       semode=$(sestatus | awk '/^Current mode/ {print ($3);}')
       se_status="${se_status} (${semode})"
fi

### MOTD ###

# colourful header. Updated every 60 minutes only but no real performance gain
NEED_UPDATE="FALSE"
[ -z "$(find "$header" -newermt 'now-60 minutes' 2> /dev/null)" ] && NEED_UPDATE="TRUE"

if [[ "$NEED_UPDATE" = "TRUE" ]]; then
    echo "$(figlet ${REDHAT_SUPPORT_PRODUCT} ${REDHAT_SUPPORT_PRODUCT_VERSION} -c | lolcat -r -f)" > $header
fi

# sysinfo update
echo -e "Welcome to ${PRETTY_NAME} ($(uname -o) $(uname -r))

System information as of $(date)

Hostname:\t${hostname}
Uptime:\t\t${up_days}d ${up_hours}h ${up_mins}m ${up_secs}s\t\t\tUsage of /:\t${root_used}/${root_total} (${root_perc})
Load 1-5-15min:\t${load_1}-${load_5}-${load_15}\t\t\tSElinux:\t${se_status}
Memory usage:\t$((${mem_used}/1024))/$((${mem_total}/1024))M (${mem_perc}%)\t\t\tProcesses:\t${processes}
Swap usage:\t$((${swap_used}/1024))/$((${swap_total}/1024))M (${swap_perc}%)\t\t\tUsers:\t\t${users}
" > $sysinfo

# available updates refreshes every 60 minutes using CACHE.
# dnf's cache is updated by the system using its own service and timer. The conservative 
# approach is to not to change this.
NEED_UPDATE="FALSE"
[ -z "$(find "$updates" -newermt 'now-60 minutes' 2> /dev/null)" ] && NEED_UPDATE="TRUE"

if [[ "$NEED_UPDATE" = "TRUE" ]]; then
       n_updates=$(dnf update --assumeno --cacheonly --noplugins | awk '/^Upgrade/ {print $2;}')
    if [[ $n_updates -eq 0 ]]; then
       echo -e "There were no updates available when last checked.\n" > $updates
    elif [[ $n_updates -eq 1 ]]; then
       echo -e "There was 1 update available when last checked.\n" > $updates
    else
       echo -e "There were ${n_updates} updates available when last checked.\n" > $updates
    fi
fi
